module proc_1(input [0:8] DIN, input Resetn, Clock, Run,
output reg Done, output reg[0:8] BusWires);

localparam T0=2'b00, T1=2'b01, T2=2'b10, T3=2'b11; //stany FSM
wire[0:2] I;
wire[0:7] Xreg, Yreg;
reg[0:7] Rin, Rout;
reg[0:1] Tstep_Q, Tstep_D;
reg ALU, Gin, IRin, Ain, Gout, DINout;
wire [0:8] R0,R1; 
wire [0:8] A,G, R2,R3,R4,R5,R6,R7;
reg[0:8] result;
wire [1:9] IR;

assign I=IR[1:3];

dec3to8(IR[4:6], 1'b1, Xreg);
dec3to8 (IR[7:9], 1'b1, Yreg);

//zarządzanie tabelą stanów FSM
always@(Tstep_Q,Run,Done)
begin
	case(Tstep_Q)
		T0:
			begin
			if(!Run) Tstep_D=T0;
			else Tstep_D=T1;
			end
		T1:
			begin 
			if(!Run) Tstep_D=T0;
			else Tstep_D=T2;
			end
		T2:
			begin 
			if(!Run) Tstep_D=T0;
			else Tstep_D=T3;
			end
		T3:
			begin 
			Tstep_D=T0;
			end
		endcase
end
localparam mv=3'b000, mvt=3'b001, add=3'b010, sub=3'b011;

//sterowanie wejściami FSM
always@(Tstep_Q or I or Xreg or Yreg)
begin
Done = 1'b0;Rin = 1'b0;Rout = 1'b0;ALU = 1'b0;Ain = 1'b0;Gin = 1'b0;
Gout = 1'b0;IRin = 1'b0;DINout = 1'b0;
		
	case(Tstep_Q)
		T0:
			begin
			IRin = 1'b1;
			end
		T1:
			begin
			case(I)
				mv:
				begin
					Rout = Yreg;
					Rin = Xreg;
					Done = 1'b1;
				end
				mvt:
				begin
					DINout = 1'b1;
					Rin = Xreg;
					Done = 1'b1;
					end
				add:
				begin
					Rout = Xreg;
					Ain = 1'b1;
					end
				sub:
				begin
					Rout = Xreg;
					Ain = 1'b1;
					end
			endcase
			end
		T2:
			begin
			case(I)
				add:
				begin
					Rout = Yreg;
					Gin = 1'b1;
					end
				sub:
				begin
					Rout = Yreg;
					Gin = 1'b1;
					ALU=1'b1;
					end
			endcase
			end
		T3:
			begin
			case(I)
				add:
				begin
					Rin = Xreg;
					Gout = 1'b1;
					Done = 1'b1;
					end
				sub:
				begin
					Rin = Xreg;
					Gout = 1'b1;
					Done = 1'b1;
					end
			endcase
			end
	endcase
end

always@(posedge Clock, negedge Resetn)
begin
	if(!Resetn) Tstep_Q=T0;
	else Tstep_Q=Tstep_D;
end

regn (BusWires, Rin[0], Clock, R0);
regn (BusWires, Rin[1], Clock, R1);
regn (BusWires, Rin[2], Clock, R2);
regn (BusWires, Rin[3], Clock, R3);
regn (BusWires, Rin[4], Clock, R4);
regn (BusWires, Rin[5], Clock, R5);
regn (BusWires, Rin[6], Clock, R6);
regn (BusWires, Rin[7], Clock, R7);
regn reg_IR(DIN, IRin, Clock, IR);
regn reg_A(BusWires, Ain, Clock, A);

always@(BusWires or A or ALU)
begin
	if(ALU)
		result = A - BusWires;
	else
		result = A + BusWires;
end

regn reg_G(result, Gin, Clock, G);

localparam Sel_D = 10'b1000000000, Sel_G = 10'b0100000000,Sel_R0 = 10'b0010000000,Sel_R1 = 10'b0001000000,
Sel_R2 = 10'b0000100000,Sel_R3 = 10'b0000010000,Sel_R4 = 10'b0000001000, Sel_R5 = 10'b0000000100,
Sel_R6 = 10'b0000000010, Sel_R7 = 10'b0000000001;
wire [0:9]sel;
assign sel={DINout,Gout,Rout};


always@(*)
	case(sel)
		Sel_R0: BusWires = R0;
			Sel_R1: BusWires = R1;
			Sel_R2: BusWires = R2;
			Sel_R3: BusWires = R3;
			Sel_R4: BusWires = R4;
			Sel_R5: BusWires = R5;
			Sel_R6: BusWires = R6;
			Sel_R7: BusWires = R7;
			Sel_G: BusWires = G;
			Sel_D: BusWires = DIN;
			default:BusWires=DIN;
	endcase
	
	
endmodule


module dec3to8(W, En, Y);
	input [0:2] W;
	input En;
	output [0:7] Y;
	reg [0:7] Y;
	
	always @(W or En)
	begin
	if (En == 1)
		case (W)
			3'b000: Y = 8'b10000000;
				3'b001: Y = 8'b01000000;
				3'b010: Y = 8'b00100000;
				3'b011: Y = 8'b00010000;
				3'b100: Y = 8'b00001000;
				3'b101: Y = 8'b00000100;
				3'b110: Y = 8'b00000010;
				3'b111: Y = 8'b00000001;

		endcase
	else
	Y = 8'b00000000;

	end
endmodule

module regn(R, Rin, Clock, Q);
parameter n = 9;
input [0:n-1] R;
input Rin, Clock;
output [n-1:0] Q;
reg [n-1:0] Q;
always @(posedge Clock)
	if (Rin) Q <= R;

endmodule
