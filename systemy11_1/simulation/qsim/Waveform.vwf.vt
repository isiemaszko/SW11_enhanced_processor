// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/15/2020 17:11:52"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          processor_2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processor_2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [8:0] DIN;
reg Run;
reg clk;
reg reset_n;
// wires                                               
wire [8:0] ADDR;
wire [8:0] DOUT;
wire Done;
wire WEN;

// assign statements (if any)                          
processor_2 i1 (
// port map - connection between master ports and signals/registers   
	.ADDR(ADDR),
	.DIN(DIN),
	.DOUT(DOUT),
	.Done(Done),
	.Run(Run),
	.WEN(WEN),
	.clk(clk),
	.reset_n(reset_n)
);
initial 
begin 
#1000000 $finish;
end 

// reset_n
initial
begin
	reset_n = 1'b0;
	reset_n = #20000 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// Run
initial
begin
	repeat(3)
	begin
		Run = 1'b0;
		Run = #20000 1'b1;
		# 20000;
	end
	Run = 1'b0;
	Run = #60000 1'b1;
	# 20000;
	repeat(20)
	begin
		Run = 1'b0;
		Run = #20000 1'b1;
		# 20000;
	end
end 
// DIN[ 8 ]
initial
begin
	DIN[8] = 1'b0;
end 
// DIN[ 7 ]
initial
begin
	DIN[7] = 1'b0;
	DIN[7] = #100000 1'b1;
	DIN[7] = #90000 1'b0;
end 
// DIN[ 6 ]
initial
begin
	DIN[6] = 1'b0;
	DIN[6] = #20000 1'b1;
	DIN[6] = #20000 1'b0;
end 
// DIN[ 5 ]
initial
begin
	DIN[5] = 1'b0;
end 
// DIN[ 4 ]
initial
begin
	DIN[4] = 1'b0;
end 
// DIN[ 3 ]
initial
begin
	DIN[3] = 1'b0;
	DIN[3] = #60000 1'b1;
	DIN[3] = #40000 1'b0;
end 
// DIN[ 2 ]
initial
begin
	DIN[2] = 1'b0;
	DIN[2] = #40000 1'b1;
	DIN[2] = #20000 1'b0;
end 
// DIN[ 1 ]
initial
begin
	DIN[1] = 1'b0;
end 
// DIN[ 0 ]
initial
begin
	DIN[0] = 1'b0;
	DIN[0] = #40000 1'b1;
	DIN[0] = #20000 1'b0;
	DIN[0] = #40000 1'b1;
	DIN[0] = #90000 1'b0;
end 
endmodule

